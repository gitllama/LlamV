<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	var Type = new List<string>()
	{
		"Byte",
		"UInt16",
		"UInt32",
		"UInt64",
		"Int16",
		"Int32",
		"Int64",
		"Single",
		"Double"
	};
	var Type2 = new List<string>()
	{
		"Byte",
		"UInt16",
		"UInt32",
		"UInt64",
		"Int16",
		"Int32",
		"Int64",
	};
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;

using Pixels;

namespace Pixels
{
    public partial class Pixel<T>
    {
	/*
<# foreach (var T in Type){ #>
		public static explicit operator Pixel<<#= T #>>(Pixel<T> val)
		{
			<#= T #>[] dst = new <#= T #>[val.pixel.Length];
			int c = 0;
			foreach(var i in val.pixel)
			{
				//dst[c++] = (<#= T #>)(object)i;
			}
			return PixelFactory.Create<<#= T #>>(val.Maps, dst);
		}
<# } #>

        public static Pixel<T> operator <<(Pixel<T> src, int value)
        {
            switch ((object)src)
            {
<# foreach (var T in Type2){ #>
                case Pixel<<#= T #>> a:
                    Pixel<<#= T #>> dst_<#= T #> = a.Clone();
                    for (int y = 0; y < a.Height; y++)
                        for (int x = 0; x < a.Width; x++)
                            dst_<#= T #>[x, y] = (<#= T #>)(a[x, y] << value);
                    return (dynamic)dst_<#= T #>;
<# } #>
				default:
					throw new ArithmeticException();
            }
        }
		public static Pixel<T> operator *(Pixel<T> src, T value)
        {
            switch ((object)src)
            {
<# foreach (var T in Type){ #>
                case Pixel<<#= T #>> a:
                    Pixel<<#= T #>> dst_<#= T #> = a.Clone();
                    for (int y = 0; y < a.Height; y++)
                        for (int x = 0; x < a.Width; x++)
                            dst_<#= T #>[x, y] = (<#= T #>)(a[x, y] * (dynamic)value);
                    return (dynamic)dst_<#= T #>;
<# } #>
				default:
					throw new ArithmeticException();
            }
        }
		*/
    }
}