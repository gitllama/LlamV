<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	var Type = new List<string>()
	{
		"Byte",
		"UInt16",
		"UInt32",
		"UInt64",
		"Int16",
		"Int32",
		"Int64",
		"Single",
		"Double"
	};
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using System.IO;
using System.Runtime.InteropServices;
using System.Threading;

using System.Reflection;
using System.Text.RegularExpressions;
using System.Linq.Expressions;

using System.IO.Compression;
using System.Threading.Tasks;

namespace Pixels.Stream
{
    private static partial class PixelStream
    {
        private static void _Read<T>(byte[] src, T[] dst, int offset, string type) where T : struct, IComparable
        {
			switch((object)dst)
			{
<# foreach (var T in Type){ #>
				case <#= T #>[] n:
					_Read(src, n, offset, type);
					break;
<# } #>
				default:
					break;
            }
		}

<# foreach (var T in Type){ #>
        private static void _Read(byte[] src, <#= T #>[] dst, int offset, string type)
        {
			int count_byte = offset;
			switch(type)
			{
<# foreach (var T2 in Type.Where(x => x != "Byte").ToArray()){ #>
				case "<#= T2 #>":
					for (int i= 0; i< dst.Length; i++)
					{
						dst[i] = (<#= T #>)BitConverter.To<#= T2 #>(src, count_byte);
						count_byte += sizeof(<#= T2 #>);
					}
					break;
<# } #>
                case "Byte":
                    for (int i= 0; i< dst.Length; i++)
                        dst[i] = (<#= T #>)src[count_byte++];
                    break;
                case "String":
                    break;
				default:
					break;
			}
		}
<# } #>


    }
}